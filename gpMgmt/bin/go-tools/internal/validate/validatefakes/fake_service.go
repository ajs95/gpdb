// Code generated by counterfeiter. DO NOT EDIT.
package validatefakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/validate"
)

type FakeService struct {
	ValidateStageStub        func(validate.Stage) error
	validateStageMutex       sync.RWMutex
	validateStageArgsForCall []struct {
		arg1 validate.Stage
	}
	validateStageReturns struct {
		result1 error
	}
	validateStageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) ValidateStage(arg1 validate.Stage) error {
	fake.validateStageMutex.Lock()
	ret, specificReturn := fake.validateStageReturnsOnCall[len(fake.validateStageArgsForCall)]
	fake.validateStageArgsForCall = append(fake.validateStageArgsForCall, struct {
		arg1 validate.Stage
	}{arg1})
	stub := fake.ValidateStageStub
	fakeReturns := fake.validateStageReturns
	fake.recordInvocation("ValidateStage", []interface{}{arg1})
	fake.validateStageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) ValidateStageCallCount() int {
	fake.validateStageMutex.RLock()
	defer fake.validateStageMutex.RUnlock()
	return len(fake.validateStageArgsForCall)
}

func (fake *FakeService) ValidateStageCalls(stub func(validate.Stage) error) {
	fake.validateStageMutex.Lock()
	defer fake.validateStageMutex.Unlock()
	fake.ValidateStageStub = stub
}

func (fake *FakeService) ValidateStageArgsForCall(i int) validate.Stage {
	fake.validateStageMutex.RLock()
	defer fake.validateStageMutex.RUnlock()
	argsForCall := fake.validateStageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeService) ValidateStageReturns(result1 error) {
	fake.validateStageMutex.Lock()
	defer fake.validateStageMutex.Unlock()
	fake.ValidateStageStub = nil
	fake.validateStageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) ValidateStageReturnsOnCall(i int, result1 error) {
	fake.validateStageMutex.Lock()
	defer fake.validateStageMutex.Unlock()
	fake.ValidateStageStub = nil
	if fake.validateStageReturnsOnCall == nil {
		fake.validateStageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateStageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateStageMutex.RLock()
	defer fake.validateStageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validate.Service = new(FakeService)
