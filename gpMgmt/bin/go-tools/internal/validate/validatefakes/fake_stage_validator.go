// Code generated by counterfeiter. DO NOT EDIT.
package validatefakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/validate"
)

type FakeStageValidator struct {
	GetValidatorsStub        func() []validate.Validator
	getValidatorsMutex       sync.RWMutex
	getValidatorsArgsForCall []struct {
	}
	getValidatorsReturns struct {
		result1 []validate.Validator
	}
	getValidatorsReturnsOnCall map[int]struct {
		result1 []validate.Validator
	}
	ValidateConfigStub        func() error
	validateConfigMutex       sync.RWMutex
	validateConfigArgsForCall []struct {
	}
	validateConfigReturns struct {
		result1 error
	}
	validateConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStageValidator) GetValidators() []validate.Validator {
	fake.getValidatorsMutex.Lock()
	ret, specificReturn := fake.getValidatorsReturnsOnCall[len(fake.getValidatorsArgsForCall)]
	fake.getValidatorsArgsForCall = append(fake.getValidatorsArgsForCall, struct {
	}{})
	stub := fake.GetValidatorsStub
	fakeReturns := fake.getValidatorsReturns
	fake.recordInvocation("GetValidators", []interface{}{})
	fake.getValidatorsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStageValidator) GetValidatorsCallCount() int {
	fake.getValidatorsMutex.RLock()
	defer fake.getValidatorsMutex.RUnlock()
	return len(fake.getValidatorsArgsForCall)
}

func (fake *FakeStageValidator) GetValidatorsCalls(stub func() []validate.Validator) {
	fake.getValidatorsMutex.Lock()
	defer fake.getValidatorsMutex.Unlock()
	fake.GetValidatorsStub = stub
}

func (fake *FakeStageValidator) GetValidatorsReturns(result1 []validate.Validator) {
	fake.getValidatorsMutex.Lock()
	defer fake.getValidatorsMutex.Unlock()
	fake.GetValidatorsStub = nil
	fake.getValidatorsReturns = struct {
		result1 []validate.Validator
	}{result1}
}

func (fake *FakeStageValidator) GetValidatorsReturnsOnCall(i int, result1 []validate.Validator) {
	fake.getValidatorsMutex.Lock()
	defer fake.getValidatorsMutex.Unlock()
	fake.GetValidatorsStub = nil
	if fake.getValidatorsReturnsOnCall == nil {
		fake.getValidatorsReturnsOnCall = make(map[int]struct {
			result1 []validate.Validator
		})
	}
	fake.getValidatorsReturnsOnCall[i] = struct {
		result1 []validate.Validator
	}{result1}
}

func (fake *FakeStageValidator) ValidateConfig() error {
	fake.validateConfigMutex.Lock()
	ret, specificReturn := fake.validateConfigReturnsOnCall[len(fake.validateConfigArgsForCall)]
	fake.validateConfigArgsForCall = append(fake.validateConfigArgsForCall, struct {
	}{})
	stub := fake.ValidateConfigStub
	fakeReturns := fake.validateConfigReturns
	fake.recordInvocation("ValidateConfig", []interface{}{})
	fake.validateConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStageValidator) ValidateConfigCallCount() int {
	fake.validateConfigMutex.RLock()
	defer fake.validateConfigMutex.RUnlock()
	return len(fake.validateConfigArgsForCall)
}

func (fake *FakeStageValidator) ValidateConfigCalls(stub func() error) {
	fake.validateConfigMutex.Lock()
	defer fake.validateConfigMutex.Unlock()
	fake.ValidateConfigStub = stub
}

func (fake *FakeStageValidator) ValidateConfigReturns(result1 error) {
	fake.validateConfigMutex.Lock()
	defer fake.validateConfigMutex.Unlock()
	fake.ValidateConfigStub = nil
	fake.validateConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStageValidator) ValidateConfigReturnsOnCall(i int, result1 error) {
	fake.validateConfigMutex.Lock()
	defer fake.validateConfigMutex.Unlock()
	fake.ValidateConfigStub = nil
	if fake.validateConfigReturnsOnCall == nil {
		fake.validateConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStageValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getValidatorsMutex.RLock()
	defer fake.getValidatorsMutex.RUnlock()
	fake.validateConfigMutex.RLock()
	defer fake.validateConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStageValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validate.StageValidator = new(FakeStageValidator)
