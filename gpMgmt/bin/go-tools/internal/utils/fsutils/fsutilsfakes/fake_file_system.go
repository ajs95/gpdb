// Code generated by counterfeiter. DO NOT EDIT.
package fsutilsfakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/utils/fsutils"
)

type FakeFileSystem struct {
	IsFilePresentStub        func(string) (bool, error)
	isFilePresentMutex       sync.RWMutex
	isFilePresentArgsForCall []struct {
		arg1 string
	}
	isFilePresentReturns struct {
		result1 bool
		result2 error
	}
	isFilePresentReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileSystem) IsFilePresent(arg1 string) (bool, error) {
	fake.isFilePresentMutex.Lock()
	ret, specificReturn := fake.isFilePresentReturnsOnCall[len(fake.isFilePresentArgsForCall)]
	fake.isFilePresentArgsForCall = append(fake.isFilePresentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsFilePresentStub
	fakeReturns := fake.isFilePresentReturns
	fake.recordInvocation("IsFilePresent", []interface{}{arg1})
	fake.isFilePresentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileSystem) IsFilePresentCallCount() int {
	fake.isFilePresentMutex.RLock()
	defer fake.isFilePresentMutex.RUnlock()
	return len(fake.isFilePresentArgsForCall)
}

func (fake *FakeFileSystem) IsFilePresentCalls(stub func(string) (bool, error)) {
	fake.isFilePresentMutex.Lock()
	defer fake.isFilePresentMutex.Unlock()
	fake.IsFilePresentStub = stub
}

func (fake *FakeFileSystem) IsFilePresentArgsForCall(i int) string {
	fake.isFilePresentMutex.RLock()
	defer fake.isFilePresentMutex.RUnlock()
	argsForCall := fake.isFilePresentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystem) IsFilePresentReturns(result1 bool, result2 error) {
	fake.isFilePresentMutex.Lock()
	defer fake.isFilePresentMutex.Unlock()
	fake.IsFilePresentStub = nil
	fake.isFilePresentReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) IsFilePresentReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isFilePresentMutex.Lock()
	defer fake.isFilePresentMutex.Unlock()
	fake.IsFilePresentStub = nil
	if fake.isFilePresentReturnsOnCall == nil {
		fake.isFilePresentReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFilePresentReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isFilePresentMutex.RLock()
	defer fake.isFilePresentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileSystem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fsutils.FileSystem = new(FakeFileSystem)
