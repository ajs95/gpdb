// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/utils"
)

type FakeHostUtil struct {
	VerifyHostIpStub        func(string) error
	verifyHostIpMutex       sync.RWMutex
	verifyHostIpArgsForCall []struct {
		arg1 string
	}
	verifyHostIpReturns struct {
		result1 error
	}
	verifyHostIpReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHostUtil) VerifyHostIp(arg1 string) error {
	fake.verifyHostIpMutex.Lock()
	ret, specificReturn := fake.verifyHostIpReturnsOnCall[len(fake.verifyHostIpArgsForCall)]
	fake.verifyHostIpArgsForCall = append(fake.verifyHostIpArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.VerifyHostIpStub
	fakeReturns := fake.verifyHostIpReturns
	fake.recordInvocation("VerifyHostIp", []interface{}{arg1})
	fake.verifyHostIpMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHostUtil) VerifyHostIpCallCount() int {
	fake.verifyHostIpMutex.RLock()
	defer fake.verifyHostIpMutex.RUnlock()
	return len(fake.verifyHostIpArgsForCall)
}

func (fake *FakeHostUtil) VerifyHostIpCalls(stub func(string) error) {
	fake.verifyHostIpMutex.Lock()
	defer fake.verifyHostIpMutex.Unlock()
	fake.VerifyHostIpStub = stub
}

func (fake *FakeHostUtil) VerifyHostIpArgsForCall(i int) string {
	fake.verifyHostIpMutex.RLock()
	defer fake.verifyHostIpMutex.RUnlock()
	argsForCall := fake.verifyHostIpArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHostUtil) VerifyHostIpReturns(result1 error) {
	fake.verifyHostIpMutex.Lock()
	defer fake.verifyHostIpMutex.Unlock()
	fake.VerifyHostIpStub = nil
	fake.verifyHostIpReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHostUtil) VerifyHostIpReturnsOnCall(i int, result1 error) {
	fake.verifyHostIpMutex.Lock()
	defer fake.verifyHostIpMutex.Unlock()
	fake.VerifyHostIpStub = nil
	if fake.verifyHostIpReturnsOnCall == nil {
		fake.verifyHostIpReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyHostIpReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHostUtil) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyHostIpMutex.RLock()
	defer fake.verifyHostIpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHostUtil) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.HostUtil = new(FakeHostUtil)
