// Code generated by counterfeiter. DO NOT EDIT.
package netutilsfakes

import (
	"net"
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/utils/netutils"
)

type FakeNetworkUtil struct {
	GenerateIpv4ListStub        func(string, string) ([]string, error)
	generateIpv4ListMutex       sync.RWMutex
	generateIpv4ListArgsForCall []struct {
		arg1 string
		arg2 string
	}
	generateIpv4ListReturns struct {
		result1 []string
		result2 error
	}
	generateIpv4ListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	InterfacesStub        func() ([]net.Interface, error)
	interfacesMutex       sync.RWMutex
	interfacesArgsForCall []struct {
	}
	interfacesReturns struct {
		result1 []net.Interface
		result2 error
	}
	interfacesReturnsOnCall map[int]struct {
		result1 []net.Interface
		result2 error
	}
	IsReachableStub        func(string) bool
	isReachableMutex       sync.RWMutex
	isReachableArgsForCall []struct {
		arg1 string
	}
	isReachableReturns struct {
		result1 bool
	}
	isReachableReturnsOnCall map[int]struct {
		result1 bool
	}
	IsValidIpv4Stub        func(string) bool
	isValidIpv4Mutex       sync.RWMutex
	isValidIpv4ArgsForCall []struct {
		arg1 string
	}
	isValidIpv4Returns struct {
		result1 bool
	}
	isValidIpv4ReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetworkUtil) GenerateIpv4List(arg1 string, arg2 string) ([]string, error) {
	fake.generateIpv4ListMutex.Lock()
	ret, specificReturn := fake.generateIpv4ListReturnsOnCall[len(fake.generateIpv4ListArgsForCall)]
	fake.generateIpv4ListArgsForCall = append(fake.generateIpv4ListArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GenerateIpv4ListStub
	fakeReturns := fake.generateIpv4ListReturns
	fake.recordInvocation("GenerateIpv4List", []interface{}{arg1, arg2})
	fake.generateIpv4ListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkUtil) GenerateIpv4ListCallCount() int {
	fake.generateIpv4ListMutex.RLock()
	defer fake.generateIpv4ListMutex.RUnlock()
	return len(fake.generateIpv4ListArgsForCall)
}

func (fake *FakeNetworkUtil) GenerateIpv4ListCalls(stub func(string, string) ([]string, error)) {
	fake.generateIpv4ListMutex.Lock()
	defer fake.generateIpv4ListMutex.Unlock()
	fake.GenerateIpv4ListStub = stub
}

func (fake *FakeNetworkUtil) GenerateIpv4ListArgsForCall(i int) (string, string) {
	fake.generateIpv4ListMutex.RLock()
	defer fake.generateIpv4ListMutex.RUnlock()
	argsForCall := fake.generateIpv4ListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNetworkUtil) GenerateIpv4ListReturns(result1 []string, result2 error) {
	fake.generateIpv4ListMutex.Lock()
	defer fake.generateIpv4ListMutex.Unlock()
	fake.GenerateIpv4ListStub = nil
	fake.generateIpv4ListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkUtil) GenerateIpv4ListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.generateIpv4ListMutex.Lock()
	defer fake.generateIpv4ListMutex.Unlock()
	fake.GenerateIpv4ListStub = nil
	if fake.generateIpv4ListReturnsOnCall == nil {
		fake.generateIpv4ListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.generateIpv4ListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkUtil) Interfaces() ([]net.Interface, error) {
	fake.interfacesMutex.Lock()
	ret, specificReturn := fake.interfacesReturnsOnCall[len(fake.interfacesArgsForCall)]
	fake.interfacesArgsForCall = append(fake.interfacesArgsForCall, struct {
	}{})
	stub := fake.InterfacesStub
	fakeReturns := fake.interfacesReturns
	fake.recordInvocation("Interfaces", []interface{}{})
	fake.interfacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkUtil) InterfacesCallCount() int {
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	return len(fake.interfacesArgsForCall)
}

func (fake *FakeNetworkUtil) InterfacesCalls(stub func() ([]net.Interface, error)) {
	fake.interfacesMutex.Lock()
	defer fake.interfacesMutex.Unlock()
	fake.InterfacesStub = stub
}

func (fake *FakeNetworkUtil) InterfacesReturns(result1 []net.Interface, result2 error) {
	fake.interfacesMutex.Lock()
	defer fake.interfacesMutex.Unlock()
	fake.InterfacesStub = nil
	fake.interfacesReturns = struct {
		result1 []net.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkUtil) InterfacesReturnsOnCall(i int, result1 []net.Interface, result2 error) {
	fake.interfacesMutex.Lock()
	defer fake.interfacesMutex.Unlock()
	fake.InterfacesStub = nil
	if fake.interfacesReturnsOnCall == nil {
		fake.interfacesReturnsOnCall = make(map[int]struct {
			result1 []net.Interface
			result2 error
		})
	}
	fake.interfacesReturnsOnCall[i] = struct {
		result1 []net.Interface
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkUtil) IsReachable(arg1 string) bool {
	fake.isReachableMutex.Lock()
	ret, specificReturn := fake.isReachableReturnsOnCall[len(fake.isReachableArgsForCall)]
	fake.isReachableArgsForCall = append(fake.isReachableArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsReachableStub
	fakeReturns := fake.isReachableReturns
	fake.recordInvocation("IsReachable", []interface{}{arg1})
	fake.isReachableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkUtil) IsReachableCallCount() int {
	fake.isReachableMutex.RLock()
	defer fake.isReachableMutex.RUnlock()
	return len(fake.isReachableArgsForCall)
}

func (fake *FakeNetworkUtil) IsReachableCalls(stub func(string) bool) {
	fake.isReachableMutex.Lock()
	defer fake.isReachableMutex.Unlock()
	fake.IsReachableStub = stub
}

func (fake *FakeNetworkUtil) IsReachableArgsForCall(i int) string {
	fake.isReachableMutex.RLock()
	defer fake.isReachableMutex.RUnlock()
	argsForCall := fake.isReachableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkUtil) IsReachableReturns(result1 bool) {
	fake.isReachableMutex.Lock()
	defer fake.isReachableMutex.Unlock()
	fake.IsReachableStub = nil
	fake.isReachableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetworkUtil) IsReachableReturnsOnCall(i int, result1 bool) {
	fake.isReachableMutex.Lock()
	defer fake.isReachableMutex.Unlock()
	fake.IsReachableStub = nil
	if fake.isReachableReturnsOnCall == nil {
		fake.isReachableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isReachableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetworkUtil) IsValidIpv4(arg1 string) bool {
	fake.isValidIpv4Mutex.Lock()
	ret, specificReturn := fake.isValidIpv4ReturnsOnCall[len(fake.isValidIpv4ArgsForCall)]
	fake.isValidIpv4ArgsForCall = append(fake.isValidIpv4ArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsValidIpv4Stub
	fakeReturns := fake.isValidIpv4Returns
	fake.recordInvocation("IsValidIpv4", []interface{}{arg1})
	fake.isValidIpv4Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkUtil) IsValidIpv4CallCount() int {
	fake.isValidIpv4Mutex.RLock()
	defer fake.isValidIpv4Mutex.RUnlock()
	return len(fake.isValidIpv4ArgsForCall)
}

func (fake *FakeNetworkUtil) IsValidIpv4Calls(stub func(string) bool) {
	fake.isValidIpv4Mutex.Lock()
	defer fake.isValidIpv4Mutex.Unlock()
	fake.IsValidIpv4Stub = stub
}

func (fake *FakeNetworkUtil) IsValidIpv4ArgsForCall(i int) string {
	fake.isValidIpv4Mutex.RLock()
	defer fake.isValidIpv4Mutex.RUnlock()
	argsForCall := fake.isValidIpv4ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkUtil) IsValidIpv4Returns(result1 bool) {
	fake.isValidIpv4Mutex.Lock()
	defer fake.isValidIpv4Mutex.Unlock()
	fake.IsValidIpv4Stub = nil
	fake.isValidIpv4Returns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetworkUtil) IsValidIpv4ReturnsOnCall(i int, result1 bool) {
	fake.isValidIpv4Mutex.Lock()
	defer fake.isValidIpv4Mutex.Unlock()
	fake.IsValidIpv4Stub = nil
	if fake.isValidIpv4ReturnsOnCall == nil {
		fake.isValidIpv4ReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isValidIpv4ReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetworkUtil) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateIpv4ListMutex.RLock()
	defer fake.generateIpv4ListMutex.RUnlock()
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	fake.isReachableMutex.RLock()
	defer fake.isReachableMutex.RUnlock()
	fake.isValidIpv4Mutex.RLock()
	defer fake.isValidIpv4Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetworkUtil) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ netutils.NetworkUtil = new(FakeNetworkUtil)
