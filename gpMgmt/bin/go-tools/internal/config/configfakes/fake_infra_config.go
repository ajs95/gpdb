// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/config"
)

type FakeInfraConfig struct {
	GetCoordinatorStub        func() config.HostConfig
	getCoordinatorMutex       sync.RWMutex
	getCoordinatorArgsForCall []struct {
	}
	getCoordinatorReturns struct {
		result1 config.HostConfig
	}
	getCoordinatorReturnsOnCall map[int]struct {
		result1 config.HostConfig
	}
	GetPublishPortStub        func() int
	getPublishPortMutex       sync.RWMutex
	getPublishPortArgsForCall []struct {
	}
	getPublishPortReturns struct {
		result1 int
	}
	getPublishPortReturnsOnCall map[int]struct {
		result1 int
	}
	GetRequestPortStub        func() int
	getRequestPortMutex       sync.RWMutex
	getRequestPortArgsForCall []struct {
	}
	getRequestPortReturns struct {
		result1 int
	}
	getRequestPortReturnsOnCall map[int]struct {
		result1 int
	}
	GetSegmentHostStub        func() config.SegmentHostsConfig
	getSegmentHostMutex       sync.RWMutex
	getSegmentHostArgsForCall []struct {
	}
	getSegmentHostReturns struct {
		result1 config.SegmentHostsConfig
	}
	getSegmentHostReturnsOnCall map[int]struct {
		result1 config.SegmentHostsConfig
	}
	GetStandbyStub        func() config.HostConfig
	getStandbyMutex       sync.RWMutex
	getStandbyArgsForCall []struct {
	}
	getStandbyReturns struct {
		result1 config.HostConfig
	}
	getStandbyReturnsOnCall map[int]struct {
		result1 config.HostConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfraConfig) GetCoordinator() config.HostConfig {
	fake.getCoordinatorMutex.Lock()
	ret, specificReturn := fake.getCoordinatorReturnsOnCall[len(fake.getCoordinatorArgsForCall)]
	fake.getCoordinatorArgsForCall = append(fake.getCoordinatorArgsForCall, struct {
	}{})
	stub := fake.GetCoordinatorStub
	fakeReturns := fake.getCoordinatorReturns
	fake.recordInvocation("GetCoordinator", []interface{}{})
	fake.getCoordinatorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfraConfig) GetCoordinatorCallCount() int {
	fake.getCoordinatorMutex.RLock()
	defer fake.getCoordinatorMutex.RUnlock()
	return len(fake.getCoordinatorArgsForCall)
}

func (fake *FakeInfraConfig) GetCoordinatorCalls(stub func() config.HostConfig) {
	fake.getCoordinatorMutex.Lock()
	defer fake.getCoordinatorMutex.Unlock()
	fake.GetCoordinatorStub = stub
}

func (fake *FakeInfraConfig) GetCoordinatorReturns(result1 config.HostConfig) {
	fake.getCoordinatorMutex.Lock()
	defer fake.getCoordinatorMutex.Unlock()
	fake.GetCoordinatorStub = nil
	fake.getCoordinatorReturns = struct {
		result1 config.HostConfig
	}{result1}
}

func (fake *FakeInfraConfig) GetCoordinatorReturnsOnCall(i int, result1 config.HostConfig) {
	fake.getCoordinatorMutex.Lock()
	defer fake.getCoordinatorMutex.Unlock()
	fake.GetCoordinatorStub = nil
	if fake.getCoordinatorReturnsOnCall == nil {
		fake.getCoordinatorReturnsOnCall = make(map[int]struct {
			result1 config.HostConfig
		})
	}
	fake.getCoordinatorReturnsOnCall[i] = struct {
		result1 config.HostConfig
	}{result1}
}

func (fake *FakeInfraConfig) GetPublishPort() int {
	fake.getPublishPortMutex.Lock()
	ret, specificReturn := fake.getPublishPortReturnsOnCall[len(fake.getPublishPortArgsForCall)]
	fake.getPublishPortArgsForCall = append(fake.getPublishPortArgsForCall, struct {
	}{})
	stub := fake.GetPublishPortStub
	fakeReturns := fake.getPublishPortReturns
	fake.recordInvocation("GetPublishPort", []interface{}{})
	fake.getPublishPortMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfraConfig) GetPublishPortCallCount() int {
	fake.getPublishPortMutex.RLock()
	defer fake.getPublishPortMutex.RUnlock()
	return len(fake.getPublishPortArgsForCall)
}

func (fake *FakeInfraConfig) GetPublishPortCalls(stub func() int) {
	fake.getPublishPortMutex.Lock()
	defer fake.getPublishPortMutex.Unlock()
	fake.GetPublishPortStub = stub
}

func (fake *FakeInfraConfig) GetPublishPortReturns(result1 int) {
	fake.getPublishPortMutex.Lock()
	defer fake.getPublishPortMutex.Unlock()
	fake.GetPublishPortStub = nil
	fake.getPublishPortReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeInfraConfig) GetPublishPortReturnsOnCall(i int, result1 int) {
	fake.getPublishPortMutex.Lock()
	defer fake.getPublishPortMutex.Unlock()
	fake.GetPublishPortStub = nil
	if fake.getPublishPortReturnsOnCall == nil {
		fake.getPublishPortReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getPublishPortReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeInfraConfig) GetRequestPort() int {
	fake.getRequestPortMutex.Lock()
	ret, specificReturn := fake.getRequestPortReturnsOnCall[len(fake.getRequestPortArgsForCall)]
	fake.getRequestPortArgsForCall = append(fake.getRequestPortArgsForCall, struct {
	}{})
	stub := fake.GetRequestPortStub
	fakeReturns := fake.getRequestPortReturns
	fake.recordInvocation("GetRequestPort", []interface{}{})
	fake.getRequestPortMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfraConfig) GetRequestPortCallCount() int {
	fake.getRequestPortMutex.RLock()
	defer fake.getRequestPortMutex.RUnlock()
	return len(fake.getRequestPortArgsForCall)
}

func (fake *FakeInfraConfig) GetRequestPortCalls(stub func() int) {
	fake.getRequestPortMutex.Lock()
	defer fake.getRequestPortMutex.Unlock()
	fake.GetRequestPortStub = stub
}

func (fake *FakeInfraConfig) GetRequestPortReturns(result1 int) {
	fake.getRequestPortMutex.Lock()
	defer fake.getRequestPortMutex.Unlock()
	fake.GetRequestPortStub = nil
	fake.getRequestPortReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeInfraConfig) GetRequestPortReturnsOnCall(i int, result1 int) {
	fake.getRequestPortMutex.Lock()
	defer fake.getRequestPortMutex.Unlock()
	fake.GetRequestPortStub = nil
	if fake.getRequestPortReturnsOnCall == nil {
		fake.getRequestPortReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getRequestPortReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeInfraConfig) GetSegmentHost() config.SegmentHostsConfig {
	fake.getSegmentHostMutex.Lock()
	ret, specificReturn := fake.getSegmentHostReturnsOnCall[len(fake.getSegmentHostArgsForCall)]
	fake.getSegmentHostArgsForCall = append(fake.getSegmentHostArgsForCall, struct {
	}{})
	stub := fake.GetSegmentHostStub
	fakeReturns := fake.getSegmentHostReturns
	fake.recordInvocation("GetSegmentHost", []interface{}{})
	fake.getSegmentHostMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfraConfig) GetSegmentHostCallCount() int {
	fake.getSegmentHostMutex.RLock()
	defer fake.getSegmentHostMutex.RUnlock()
	return len(fake.getSegmentHostArgsForCall)
}

func (fake *FakeInfraConfig) GetSegmentHostCalls(stub func() config.SegmentHostsConfig) {
	fake.getSegmentHostMutex.Lock()
	defer fake.getSegmentHostMutex.Unlock()
	fake.GetSegmentHostStub = stub
}

func (fake *FakeInfraConfig) GetSegmentHostReturns(result1 config.SegmentHostsConfig) {
	fake.getSegmentHostMutex.Lock()
	defer fake.getSegmentHostMutex.Unlock()
	fake.GetSegmentHostStub = nil
	fake.getSegmentHostReturns = struct {
		result1 config.SegmentHostsConfig
	}{result1}
}

func (fake *FakeInfraConfig) GetSegmentHostReturnsOnCall(i int, result1 config.SegmentHostsConfig) {
	fake.getSegmentHostMutex.Lock()
	defer fake.getSegmentHostMutex.Unlock()
	fake.GetSegmentHostStub = nil
	if fake.getSegmentHostReturnsOnCall == nil {
		fake.getSegmentHostReturnsOnCall = make(map[int]struct {
			result1 config.SegmentHostsConfig
		})
	}
	fake.getSegmentHostReturnsOnCall[i] = struct {
		result1 config.SegmentHostsConfig
	}{result1}
}

func (fake *FakeInfraConfig) GetStandby() config.HostConfig {
	fake.getStandbyMutex.Lock()
	ret, specificReturn := fake.getStandbyReturnsOnCall[len(fake.getStandbyArgsForCall)]
	fake.getStandbyArgsForCall = append(fake.getStandbyArgsForCall, struct {
	}{})
	stub := fake.GetStandbyStub
	fakeReturns := fake.getStandbyReturns
	fake.recordInvocation("GetStandby", []interface{}{})
	fake.getStandbyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfraConfig) GetStandbyCallCount() int {
	fake.getStandbyMutex.RLock()
	defer fake.getStandbyMutex.RUnlock()
	return len(fake.getStandbyArgsForCall)
}

func (fake *FakeInfraConfig) GetStandbyCalls(stub func() config.HostConfig) {
	fake.getStandbyMutex.Lock()
	defer fake.getStandbyMutex.Unlock()
	fake.GetStandbyStub = stub
}

func (fake *FakeInfraConfig) GetStandbyReturns(result1 config.HostConfig) {
	fake.getStandbyMutex.Lock()
	defer fake.getStandbyMutex.Unlock()
	fake.GetStandbyStub = nil
	fake.getStandbyReturns = struct {
		result1 config.HostConfig
	}{result1}
}

func (fake *FakeInfraConfig) GetStandbyReturnsOnCall(i int, result1 config.HostConfig) {
	fake.getStandbyMutex.Lock()
	defer fake.getStandbyMutex.Unlock()
	fake.GetStandbyStub = nil
	if fake.getStandbyReturnsOnCall == nil {
		fake.getStandbyReturnsOnCall = make(map[int]struct {
			result1 config.HostConfig
		})
	}
	fake.getStandbyReturnsOnCall[i] = struct {
		result1 config.HostConfig
	}{result1}
}

func (fake *FakeInfraConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCoordinatorMutex.RLock()
	defer fake.getCoordinatorMutex.RUnlock()
	fake.getPublishPortMutex.RLock()
	defer fake.getPublishPortMutex.RUnlock()
	fake.getRequestPortMutex.RLock()
	defer fake.getRequestPortMutex.RUnlock()
	fake.getSegmentHostMutex.RLock()
	defer fake.getSegmentHostMutex.RUnlock()
	fake.getStandbyMutex.RLock()
	defer fake.getStandbyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInfraConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.InfraConfig = new(FakeInfraConfig)
