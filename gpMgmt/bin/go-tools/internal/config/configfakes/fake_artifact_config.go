// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/config"
)

type FakeArtifactConfig struct {
	GetDependencyListStub        func() []string
	getDependencyListMutex       sync.RWMutex
	getDependencyListArgsForCall []struct {
	}
	getDependencyListReturns struct {
		result1 []string
	}
	getDependencyListReturnsOnCall map[int]struct {
		result1 []string
	}
	GetGreenplumStub        func() string
	getGreenplumMutex       sync.RWMutex
	getGreenplumArgsForCall []struct {
	}
	getGreenplumReturns struct {
		result1 string
	}
	getGreenplumReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifactConfig) GetDependencyList() []string {
	fake.getDependencyListMutex.Lock()
	ret, specificReturn := fake.getDependencyListReturnsOnCall[len(fake.getDependencyListArgsForCall)]
	fake.getDependencyListArgsForCall = append(fake.getDependencyListArgsForCall, struct {
	}{})
	stub := fake.GetDependencyListStub
	fakeReturns := fake.getDependencyListReturns
	fake.recordInvocation("GetDependencyList", []interface{}{})
	fake.getDependencyListMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArtifactConfig) GetDependencyListCallCount() int {
	fake.getDependencyListMutex.RLock()
	defer fake.getDependencyListMutex.RUnlock()
	return len(fake.getDependencyListArgsForCall)
}

func (fake *FakeArtifactConfig) GetDependencyListCalls(stub func() []string) {
	fake.getDependencyListMutex.Lock()
	defer fake.getDependencyListMutex.Unlock()
	fake.GetDependencyListStub = stub
}

func (fake *FakeArtifactConfig) GetDependencyListReturns(result1 []string) {
	fake.getDependencyListMutex.Lock()
	defer fake.getDependencyListMutex.Unlock()
	fake.GetDependencyListStub = nil
	fake.getDependencyListReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeArtifactConfig) GetDependencyListReturnsOnCall(i int, result1 []string) {
	fake.getDependencyListMutex.Lock()
	defer fake.getDependencyListMutex.Unlock()
	fake.GetDependencyListStub = nil
	if fake.getDependencyListReturnsOnCall == nil {
		fake.getDependencyListReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getDependencyListReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeArtifactConfig) GetGreenplum() string {
	fake.getGreenplumMutex.Lock()
	ret, specificReturn := fake.getGreenplumReturnsOnCall[len(fake.getGreenplumArgsForCall)]
	fake.getGreenplumArgsForCall = append(fake.getGreenplumArgsForCall, struct {
	}{})
	stub := fake.GetGreenplumStub
	fakeReturns := fake.getGreenplumReturns
	fake.recordInvocation("GetGreenplum", []interface{}{})
	fake.getGreenplumMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArtifactConfig) GetGreenplumCallCount() int {
	fake.getGreenplumMutex.RLock()
	defer fake.getGreenplumMutex.RUnlock()
	return len(fake.getGreenplumArgsForCall)
}

func (fake *FakeArtifactConfig) GetGreenplumCalls(stub func() string) {
	fake.getGreenplumMutex.Lock()
	defer fake.getGreenplumMutex.Unlock()
	fake.GetGreenplumStub = stub
}

func (fake *FakeArtifactConfig) GetGreenplumReturns(result1 string) {
	fake.getGreenplumMutex.Lock()
	defer fake.getGreenplumMutex.Unlock()
	fake.GetGreenplumStub = nil
	fake.getGreenplumReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeArtifactConfig) GetGreenplumReturnsOnCall(i int, result1 string) {
	fake.getGreenplumMutex.Lock()
	defer fake.getGreenplumMutex.Unlock()
	fake.GetGreenplumStub = nil
	if fake.getGreenplumReturnsOnCall == nil {
		fake.getGreenplumReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getGreenplumReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeArtifactConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDependencyListMutex.RLock()
	defer fake.getDependencyListMutex.RUnlock()
	fake.getGreenplumMutex.RLock()
	defer fake.getGreenplumMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtifactConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.ArtifactConfig = new(FakeArtifactConfig)
