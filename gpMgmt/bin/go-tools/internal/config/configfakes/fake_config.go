// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/greenplum-db/gpdb/gp/internal/config"
)

type FakeConfig struct {
	GenerateSegmentIPListStub        func() error
	generateSegmentIPListMutex       sync.RWMutex
	generateSegmentIPListArgsForCall []struct {
	}
	generateSegmentIPListReturns struct {
		result1 error
	}
	generateSegmentIPListReturnsOnCall map[int]struct {
		result1 error
	}
	GetArtifactConfigStub        func() config.ArtifactConfig
	getArtifactConfigMutex       sync.RWMutex
	getArtifactConfigArgsForCall []struct {
	}
	getArtifactConfigReturns struct {
		result1 config.ArtifactConfig
	}
	getArtifactConfigReturnsOnCall map[int]struct {
		result1 config.ArtifactConfig
	}
	GetDatabaseConfigStub        func() config.DatabaseConfig
	getDatabaseConfigMutex       sync.RWMutex
	getDatabaseConfigArgsForCall []struct {
	}
	getDatabaseConfigReturns struct {
		result1 config.DatabaseConfig
	}
	getDatabaseConfigReturnsOnCall map[int]struct {
		result1 config.DatabaseConfig
	}
	GetInfraConfigStub        func() config.InfraConfig
	getInfraConfigMutex       sync.RWMutex
	getInfraConfigArgsForCall []struct {
	}
	getInfraConfigReturns struct {
		result1 config.InfraConfig
	}
	getInfraConfigReturnsOnCall map[int]struct {
		result1 config.InfraConfig
	}
	LoadStub        func(string) error
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 string
	}
	loadReturns struct {
		result1 error
	}
	loadReturnsOnCall map[int]struct {
		result1 error
	}
	SetNameStub        func(string)
	setNameMutex       sync.RWMutex
	setNameArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfig) GenerateSegmentIPList() error {
	fake.generateSegmentIPListMutex.Lock()
	ret, specificReturn := fake.generateSegmentIPListReturnsOnCall[len(fake.generateSegmentIPListArgsForCall)]
	fake.generateSegmentIPListArgsForCall = append(fake.generateSegmentIPListArgsForCall, struct {
	}{})
	stub := fake.GenerateSegmentIPListStub
	fakeReturns := fake.generateSegmentIPListReturns
	fake.recordInvocation("GenerateSegmentIPList", []interface{}{})
	fake.generateSegmentIPListMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GenerateSegmentIPListCallCount() int {
	fake.generateSegmentIPListMutex.RLock()
	defer fake.generateSegmentIPListMutex.RUnlock()
	return len(fake.generateSegmentIPListArgsForCall)
}

func (fake *FakeConfig) GenerateSegmentIPListCalls(stub func() error) {
	fake.generateSegmentIPListMutex.Lock()
	defer fake.generateSegmentIPListMutex.Unlock()
	fake.GenerateSegmentIPListStub = stub
}

func (fake *FakeConfig) GenerateSegmentIPListReturns(result1 error) {
	fake.generateSegmentIPListMutex.Lock()
	defer fake.generateSegmentIPListMutex.Unlock()
	fake.GenerateSegmentIPListStub = nil
	fake.generateSegmentIPListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) GenerateSegmentIPListReturnsOnCall(i int, result1 error) {
	fake.generateSegmentIPListMutex.Lock()
	defer fake.generateSegmentIPListMutex.Unlock()
	fake.GenerateSegmentIPListStub = nil
	if fake.generateSegmentIPListReturnsOnCall == nil {
		fake.generateSegmentIPListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.generateSegmentIPListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) GetArtifactConfig() config.ArtifactConfig {
	fake.getArtifactConfigMutex.Lock()
	ret, specificReturn := fake.getArtifactConfigReturnsOnCall[len(fake.getArtifactConfigArgsForCall)]
	fake.getArtifactConfigArgsForCall = append(fake.getArtifactConfigArgsForCall, struct {
	}{})
	stub := fake.GetArtifactConfigStub
	fakeReturns := fake.getArtifactConfigReturns
	fake.recordInvocation("GetArtifactConfig", []interface{}{})
	fake.getArtifactConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetArtifactConfigCallCount() int {
	fake.getArtifactConfigMutex.RLock()
	defer fake.getArtifactConfigMutex.RUnlock()
	return len(fake.getArtifactConfigArgsForCall)
}

func (fake *FakeConfig) GetArtifactConfigCalls(stub func() config.ArtifactConfig) {
	fake.getArtifactConfigMutex.Lock()
	defer fake.getArtifactConfigMutex.Unlock()
	fake.GetArtifactConfigStub = stub
}

func (fake *FakeConfig) GetArtifactConfigReturns(result1 config.ArtifactConfig) {
	fake.getArtifactConfigMutex.Lock()
	defer fake.getArtifactConfigMutex.Unlock()
	fake.GetArtifactConfigStub = nil
	fake.getArtifactConfigReturns = struct {
		result1 config.ArtifactConfig
	}{result1}
}

func (fake *FakeConfig) GetArtifactConfigReturnsOnCall(i int, result1 config.ArtifactConfig) {
	fake.getArtifactConfigMutex.Lock()
	defer fake.getArtifactConfigMutex.Unlock()
	fake.GetArtifactConfigStub = nil
	if fake.getArtifactConfigReturnsOnCall == nil {
		fake.getArtifactConfigReturnsOnCall = make(map[int]struct {
			result1 config.ArtifactConfig
		})
	}
	fake.getArtifactConfigReturnsOnCall[i] = struct {
		result1 config.ArtifactConfig
	}{result1}
}

func (fake *FakeConfig) GetDatabaseConfig() config.DatabaseConfig {
	fake.getDatabaseConfigMutex.Lock()
	ret, specificReturn := fake.getDatabaseConfigReturnsOnCall[len(fake.getDatabaseConfigArgsForCall)]
	fake.getDatabaseConfigArgsForCall = append(fake.getDatabaseConfigArgsForCall, struct {
	}{})
	stub := fake.GetDatabaseConfigStub
	fakeReturns := fake.getDatabaseConfigReturns
	fake.recordInvocation("GetDatabaseConfig", []interface{}{})
	fake.getDatabaseConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetDatabaseConfigCallCount() int {
	fake.getDatabaseConfigMutex.RLock()
	defer fake.getDatabaseConfigMutex.RUnlock()
	return len(fake.getDatabaseConfigArgsForCall)
}

func (fake *FakeConfig) GetDatabaseConfigCalls(stub func() config.DatabaseConfig) {
	fake.getDatabaseConfigMutex.Lock()
	defer fake.getDatabaseConfigMutex.Unlock()
	fake.GetDatabaseConfigStub = stub
}

func (fake *FakeConfig) GetDatabaseConfigReturns(result1 config.DatabaseConfig) {
	fake.getDatabaseConfigMutex.Lock()
	defer fake.getDatabaseConfigMutex.Unlock()
	fake.GetDatabaseConfigStub = nil
	fake.getDatabaseConfigReturns = struct {
		result1 config.DatabaseConfig
	}{result1}
}

func (fake *FakeConfig) GetDatabaseConfigReturnsOnCall(i int, result1 config.DatabaseConfig) {
	fake.getDatabaseConfigMutex.Lock()
	defer fake.getDatabaseConfigMutex.Unlock()
	fake.GetDatabaseConfigStub = nil
	if fake.getDatabaseConfigReturnsOnCall == nil {
		fake.getDatabaseConfigReturnsOnCall = make(map[int]struct {
			result1 config.DatabaseConfig
		})
	}
	fake.getDatabaseConfigReturnsOnCall[i] = struct {
		result1 config.DatabaseConfig
	}{result1}
}

func (fake *FakeConfig) GetInfraConfig() config.InfraConfig {
	fake.getInfraConfigMutex.Lock()
	ret, specificReturn := fake.getInfraConfigReturnsOnCall[len(fake.getInfraConfigArgsForCall)]
	fake.getInfraConfigArgsForCall = append(fake.getInfraConfigArgsForCall, struct {
	}{})
	stub := fake.GetInfraConfigStub
	fakeReturns := fake.getInfraConfigReturns
	fake.recordInvocation("GetInfraConfig", []interface{}{})
	fake.getInfraConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetInfraConfigCallCount() int {
	fake.getInfraConfigMutex.RLock()
	defer fake.getInfraConfigMutex.RUnlock()
	return len(fake.getInfraConfigArgsForCall)
}

func (fake *FakeConfig) GetInfraConfigCalls(stub func() config.InfraConfig) {
	fake.getInfraConfigMutex.Lock()
	defer fake.getInfraConfigMutex.Unlock()
	fake.GetInfraConfigStub = stub
}

func (fake *FakeConfig) GetInfraConfigReturns(result1 config.InfraConfig) {
	fake.getInfraConfigMutex.Lock()
	defer fake.getInfraConfigMutex.Unlock()
	fake.GetInfraConfigStub = nil
	fake.getInfraConfigReturns = struct {
		result1 config.InfraConfig
	}{result1}
}

func (fake *FakeConfig) GetInfraConfigReturnsOnCall(i int, result1 config.InfraConfig) {
	fake.getInfraConfigMutex.Lock()
	defer fake.getInfraConfigMutex.Unlock()
	fake.GetInfraConfigStub = nil
	if fake.getInfraConfigReturnsOnCall == nil {
		fake.getInfraConfigReturnsOnCall = make(map[int]struct {
			result1 config.InfraConfig
		})
	}
	fake.getInfraConfigReturnsOnCall[i] = struct {
		result1 config.InfraConfig
	}{result1}
}

func (fake *FakeConfig) Load(arg1 string) error {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LoadStub
	fakeReturns := fake.loadReturns
	fake.recordInvocation("Load", []interface{}{arg1})
	fake.loadMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeConfig) LoadCalls(stub func(string) error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *FakeConfig) LoadArgsForCall(i int) string {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	argsForCall := fake.loadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfig) LoadReturns(result1 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) LoadReturnsOnCall(i int, result1 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) SetName(arg1 string) {
	fake.setNameMutex.Lock()
	fake.setNameArgsForCall = append(fake.setNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetNameStub
	fake.recordInvocation("SetName", []interface{}{arg1})
	fake.setNameMutex.Unlock()
	if stub != nil {
		fake.SetNameStub(arg1)
	}
}

func (fake *FakeConfig) SetNameCallCount() int {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	return len(fake.setNameArgsForCall)
}

func (fake *FakeConfig) SetNameCalls(stub func(string)) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = stub
}

func (fake *FakeConfig) SetNameArgsForCall(i int) string {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	argsForCall := fake.setNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateSegmentIPListMutex.RLock()
	defer fake.generateSegmentIPListMutex.RUnlock()
	fake.getArtifactConfigMutex.RLock()
	defer fake.getArtifactConfigMutex.RUnlock()
	fake.getDatabaseConfigMutex.RLock()
	defer fake.getDatabaseConfigMutex.RUnlock()
	fake.getInfraConfigMutex.RLock()
	defer fake.getInfraConfigMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Config = new(FakeConfig)
